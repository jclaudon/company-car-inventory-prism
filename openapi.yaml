openapi: 3.0.0
info:
  version: 1.0.0
  title: Company Car Inventory Service
  description: Details on real-time inventory and availabiliy of cars.

servers:
  - url: https://localhost:8080/v1

security:
  - BasicAuth: []

paths:
  /inventory/car/:
    get:
      description: Returns a list of cars in Company' system.
      operationId: getInventoryCar
      parameters:
        - $ref: "#/components/parameters/PageLimit"
        - $ref: "#/components/parameters/PageOffset"
      responses:
        "200":
          description: Successfully returned a list of cars.
          content:
            application/json:
              example:
                [
                  {
                    id: 1,
                    car_type: sedan,
                    car_color: red,
                    year: 2015,
                    make: infiniti,
                    model: g35
                  },
                  {
                    id: 2,
                    car_type: suv,
                    car_color: blue,
                    year: 2022,
                    make: toyota,
                    model: forerunner
                  },
                  {
                    id: 3,
                    car_type: truck,
                    car_color: white,
                    year: 2001,
                    make: ford,
                    model: f150
                  },
                  {
                    id: 5,
                    car_type: truck,
                    car_color: black,
                    year: 1955,
                    make: ford,
                    model: clunker
                  },
                  {
                    id: 7,
                    car_type: truck,
                    car_color: black,
                    year: 1955,
                    make: ford,
                    model: clunker
                  },
                  {
                    id: 777,
                    car_type: racer,
                    car_color: yellow,
                    year: 2025,
                    make: formula,
                    model: F4S7
                  }
                ]
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Car"
        "400":
          $ref: "#/components/responses/400Error"

    post:
      description: Add a new Car into Company' inventory
      operationId: postInventoryCar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Car"
      responses:
        "200":
          description: Successfully added a new Car into Company' inventory.
        "400":
          $ref: "#/components/responses/400Error"

  /inventory/car/{id}:
    get:
      description: Obtain information about a Car by unique id
      operationId: getInventoryCarById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string

      responses:
        "200":
          description: Successfully returned a Car by id.
          content:
            application/json:
              example:
                {
                  id: 2,
                  car_type: suv,
                  car_color: blue,
                  year: 2022,
                  make: toyota,
                  model: forerunner
                }
              schema:
                $ref: "#/components/schemas/Car"

        "400":
          $ref: "#/components/responses/400Error"
    delete:
      description: Delete a Car by unique id
      operationId: deleteInventoryCarById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully deleted a Car using a unique id.
        "400":
          $ref: "#/components/responses/400Error"

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

  schemas:
    Car:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
        car_type:
          type: string
        car_color:
          type: string
        year:
          type: integer
        make:
          type: string
        model:
          type: string
  parameters:
    PageLimit:
      name: limit
      in: query
      description: Limits the number of items on a page
      schema:
        type: integer

    PageOffset:
      name: offset
      in: query
      description: Specifies the page number of the Cars to be displayed
      schema:
        type: integer

  responses:
    400Error:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string